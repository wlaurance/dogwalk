// Generated by CoffeeScript 1.3.1
(function() {
  var UtilityManager, singleton,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  singleton = require('/utils/singleton');

  UtilityManager = (function(_super) {

    __extends(UtilityManager, _super);

    UtilityManager.name = 'UtilityManager';

    function UtilityManager() {
      var dir, file;
      this.filename = 'assetnest/appinfo.json';
      dir = Ti.Filesystem.getResourcesDirectory();
      file = Ti.Filesystem.getFile(dir, this.filename);
      this.hashmap = JSON.parse(file.read());
      this.os = Ti.Platform.name;
    }

    UtilityManager.prototype.getString = function(key) {
      var a;
      a = this.hashmap.strings[key];
      return a;
    };

    UtilityManager.prototype.getData = function(where) {
      var data;
      if (this.hashmap[where] != null) {
        data = this.hashmap[where];
      } else {
        data = "";
        Ti.API.info(where + " not defined in " + this.filename);
      }
      return data;
    };

    UtilityManager.prototype.iphone = function() {
      if (this.os === 'iPhone OS') {
        return true;
      } else {
        return false;
      }
    };

    UtilityManager.prototype.android = function() {
      if (this.os === 'android') {
        return true;
      } else {
        return false;
      }
    };

    UtilityManager.prototype.fullscreen = function() {
      if (this.android) {
        return false;
      } else if (this.iphone) {
        return true;
      }
    };

    UtilityManager.prototype.clone = function(obj) {
      var key, newInstance;
      if (!(obj != null) || typeof obj !== 'object') {
        return obj;
      }
      newInstance = new obj.constructor();
      for (key in obj) {
        newInstance[key] = this.clone(obj[key]);
      }
      return newInstance;
    };

    return UtilityManager;

  })(singleton);

  module.exports = UtilityManager.get();

}).call(this);
